/*globals define, WebGMEGlobal*/
/*jshint browser: true*/

/**
 * Generated by VisualizerGenerator 1.7.0 from webgme on Sun Nov 27 2016 14:49:19 GMT-0600 (Central Standard Time).
 */

define(['js/Utils/ComponentSettings',
        'text!./OCLEditor.html'
    ],
    function (
        ComponentSettings,
        OCLEditorHtml
    ) {
    'use strict';

    var OCLEditorWidget,
        WIDGET_CLASS = 'o-c-l-editor';

    OCLEditorWidget = function (logger, container) {
        this._logger = logger.fork('Widget');

        this._el = container;

        this.nodes = {};
        this._initialize();

        this._logger.debug('ctor finished');
    };

    OCLEditorWidget.prototype._initialize = function () {
        var width = this._el.width(),
            height = this._el.height(),
            self = this;

        // set widget class
        this._el.addClass(WIDGET_CLASS);
        this._el.append(OCLEditorHtml);
        this._codearea = this._el.find('#oclarea').first();
        this._title = this._el.find('#ocl_editor_title');
        this.selectedAttribute = null;
        this.selectedNode = null;
        this._result = this._el.find('#resultarea');

        this._evalBtn = this._el.find('#evaluate').first();
        this._saveBtn = this._el.find('#save').first();

        this._evalBtn.on('click', function (/*event*/) {
            self.onEvaluate($(self._codearea).val());
        });

        this._saveBtn.on('click', function (/*event*/) {
            self.onSaving($(self._codearea).val());
        });


        // Create a dummy header 
        this._el.append('<h3>OCLEditor Events:</h3>');

        // Registering to events can be done with jQuery (as normal)
        this._el.on('dblclick', function (event) {
            event.stopPropagation();
            event.preventDefault();
            self.onBackgroundDblClick();
        });
    };

        OCLEditorWidget.prototype.setResults = function (result) {
            $(this._result).val('Result is:'+result);
        };

        OCLEditorWidget.prototype.onSaving = function(){
            this._logger.error("OnSaving Function should be overridden.");
        };

        OCLEditorWidget.prototype.onEvaluate = function(){
            this._logger.error("OnEvaluate Function should be overridden.");
        };

        OCLEditorWidget.prototype.setConstraint = function(constraint){
        $(this._codearea).val(constraint);
    };

    OCLEditorWidget.prototype.onWidgetContainerResize = function (width, height) {
        this._logger.debug('Widget is resizing...');
    };

    // Adding/Removing/Updating items
    OCLEditorWidget.prototype.addNode = function (desc) {
        if (desc) {
            // Add node to a table of nodes
            var node = document.createElement('div'),
                label = 'children';

            if (desc.childrenIds.length === 1) {
                label = 'child';
            }

            this.nodes[desc.id] = desc;
            node.innerHTML = 'Adding node "' + desc.name + '" (click to view). It has ' + 
                desc.childrenIds.length + ' ' + label + '.';

            this._el.append(node);
            node.onclick = this.onNodeClick.bind(this, desc.id);
        }
    };

    OCLEditorWidget.prototype.removeNode = function (gmeId) {
        var desc = this.nodes[gmeId];
        this._el.append('<div>Removing node "' + desc.name + '"</div>');
        delete this.nodes[gmeId];
    };

    OCLEditorWidget.prototype.updateNode = function (desc) {
        if (desc) {
            this._logger.debug('Updating node:', desc);
            this._el.append('<div>Updating node "' + desc.name + '"</div>');
        }
    };

    /* * * * * * * * Visualizer event handlers * * * * * * * */

    OCLEditorWidget.prototype.onNodeClick = function (/*id*/) {
        // This currently changes the active node to the given id and
        // this is overridden in the controller.

    };

    OCLEditorWidget.prototype.onBackgroundDblClick = function () {
        this._el.append('<div>Background was double-clicked!!</div>');
    };

    /* * * * * * * * Visualizer life cycle callbacks * * * * * * * */
    OCLEditorWidget.prototype.destroy = function () {
    };

    OCLEditorWidget.prototype.onActivate = function () {
        this._logger.debug('OCLEditorWidget has been activated');
    };

    OCLEditorWidget.prototype.onDeactivate = function () {
        this._logger.debug('OCLEditorWidget has been deactivated');
    };

        OCLEditorWidget.getName = function () {
            return 'OCLEditor';
        };

        OCLEditorWidget.getVersion = function () {
            return '0.1.0';
        };

        OCLEditorWidget.getDefaultConfig = function () {
            return {
                'theme': 'default',
                'keyBinding': 'sublime',
                'defaultSyntax': 'cpp',
                'syntaxToModeMap': {},
                'autoSaveInterval': 2000,
                'attrToSyntaxMap': {}
            };
        };

        OCLEditorWidget.getComponentId = function () {
            return 'OCLEditor';
        };

    return OCLEditorWidget;
});