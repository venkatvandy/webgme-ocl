/*globals define*/
/*jshint node:true, browser:true*/

/**
 * Generated by PluginGenerator 1.7.0 from webgme on Sat Oct 15 2016 20:02:21 GMT-0500 (Central Daylight Time).
 * A plugin that inherits from the PluginBase. To see source code documentation about available
 * properties and methods visit %host%/docs/source/PluginBase.html.
 */

define([
    'plugin/PluginConfig',
    'text!./metadata.json',
    'plugin/PluginBase',
    'text!./Templates/index.html',
], function (
    PluginConfig,
    pluginMetadata,
    PluginBase,
    indexHtmlContent) {
    'use strict';

    pluginMetadata = JSON.parse(pluginMetadata);

    /**
     * Initializes a new instance of MiniProject2.
     * @class
     * @augments {PluginBase}
     * @classdesc This class represents the plugin MiniProject2.
     * @constructor
     */
    var MiniProject2 = function () {
        // Call base class' constructor.
        PluginBase.call(this);
        this.pluginMetadata = pluginMetadata;
    };

    /**
     * Metadata associated with the plugin. Contains id, name, version, description, icon, configStructue etc.
     * This is also available at the instance at this.pluginMetadata.
     * @type {object}
     */
    MiniProject2.metadata = pluginMetadata;

    // Prototypical inheritance from PluginBase.
    MiniProject2.prototype = Object.create(PluginBase.prototype);
    MiniProject2.prototype.constructor = MiniProject2;

    /**
     * Main function for the plugin to execute. This will perform the execution.
     * Notes:
     * - Always log with the provided logger.[error,warning,info,debug].
     * - Do NOT put any user interaction logic UI, etc. inside this method.
     * - callback always has to be called even if error happened.
     *
     * @param {function(string, plugin.PluginResult)} callback - the result callback
     */

    MiniProject2.prototype.main = function (callback) {
        // Use self to access core, project, result, logger etc from PluginBase.
        // These are all instantiated at this point.
        var self = this,
            artifact,
            nodeObject;


        // Using the logger.
        //self.logger.debug('This is a debug message.');
        //self.logger.info('This is an info message.');
        //self.logger.warn('This is a warning message.');
        //self.logger.error('This is an entry message.');

        // Using the coreAPI to make changes.

        /*nodeObject = self.activeNode;1

         self.core.setAttribute(nodeObject, 'name', 'My new obj');
         self.core.setRegistry(nodeObject, 'position', {x: 70, y: 70});*/


        // This will save the changes. If you don't want to save;
        // exclude self.save and call callback directly from this scope.
        /*self.save('MiniProject2 updated model.')
         .then(function () {
         self.result.setSuccess(true);
         callback(null, self.result);
         })
         .catch(function (err) {
         // Result success is false at invocation.
         callback(err, self.result);
         });*/

        //self.metaNodeInfo=[];
        self.extractDataModel(self.rootNode)
            .then(function (nodes) {

                //self.logger.info(Object.keys(nodes));
                var dataModel = self.printChildrenRec(self.rootNode, nodes);
                var dataModelStr = JSON.stringify(dataModel, null, 4);
                self.dataModel = dataModel;

                artifact = self.blobClient.createArtifact('project-data');
                self.logger.info('**************Extracted dataModel****************', dataModelStr);


                var array_new = self.toArray(nodes);
                var array_new_str = JSON.stringify(array_new, null, 4);
                self.logger.info('*************Array Info*************',array_new_str);

                return artifact.addFiles({'tree.json':dataModelStr,'meta.json':array_new_str});


            })
            .then(function (fileHash) {
                self.result.addArtifact(fileHash);
                return artifact.save()
            })
            .then(function (artifactHash) {
                self.result.addArtifact(artifactHash);
                self.result.setSuccess(true);
                callback(null, self.result);
            })
            .catch(function (err) {
                self.logger.error(err.stack);
                // Result success is false at invocation.
                callback(err, self.result);
            }) ;
    };

    MiniProject2.prototype.extractDataModel = function (node) {
        var self = this;
        return self.core.loadSubTree(node)
            .then(function (nodeArr) {
                var nodes = {},
                    i;
                for (i = 0; i < nodeArr.length; i += 1) {
                    nodes[self.core.getPath(nodeArr[i])] = nodeArr[i];
                }
                return nodes;
            });
    };

    MiniProject2.prototype.toArray = function (nodes) {
        var self = this,
            path,
            name,
            node,
            nbrOfChildren,
            base,
            i=0,
            arr = []

        for (path in nodes) {
            node = nodes[path];
            if(self.getMetaType(node) === node)
            {
                name = self.core.getAttribute(node,'name');

                path = self.core.getPath(node);

                nbrOfChildren = self.core.getChildrenPaths(node).length;

                base = self.core.getPointerPath(node, 'base');
                if (base !== null) {
                    base = self.core.getAttribute(nodes[base], 'name');
                }
                else
                    base = "null";

                arr.push({name: name , path: path, nbrOfChildren: nbrOfChildren , base:base});
            }
        }
        return arr;
    };

    MiniProject2.prototype.printChildrenRec = function (root, nodes, indent) {
        var self = this,
            childrenPaths,
            childNode,
            name,
            attr,
            i,
            metaNode,

            dataModel = {
                    name: '',
                    isMeta: '',
                    metaType: '',
                    children:{}
            };

        indent = indent || '';

        childrenPaths = self.core.getChildrenPaths(root);

        dataModel.name = self.core.getAttribute(root, 'name');

        if(root!=self.rootNode) {
            if (self.getMetaType(root) === root) {
                dataModel.isMeta = 'true';
            }
            else {
                dataModel.isMeta = 'false';
            }

            metaNode = self.getMetaType(root);
            dataModel.metaType = self.core.getAttribute(metaNode, 'name');


            if (self.isMetaTypeOf(root, self.META.RelationshipPointer) || self.isMetaTypeOf(root,self.META.Student_study_Relation)
                || self.isMetaTypeOf(root, self.META.Student_attr) || self.isMetaTypeOf(root, self.META.Student_attr_Primary)
                || self.isMetaTypeOf(root, self.META.Subject_attr)|| self.isMetaTypeOf(root, self.META.Subject_attr_Primary)) {



                var srcPath = self.core.getPointerPath(root, 'src');
                var dstPath = self.core.getPointerPath(root, 'dst');



                // Pathes are always non-empty strings (expect for the rootNode which
                // cannot be the target of a pointer) and non-empty strings are "truthy"..
                if (srcPath && dstPath) {
                    var srcNode = nodes[srcPath];
                    var dstNode = nodes[dstPath];
                    dataModel.src = self.core.getAttribute(srcNode, 'name');
                    dataModel.dst = self.core.getAttribute(dstNode, 'name');
                }
            }
        }

        for (i = 0; i < childrenPaths.length; i += 1) {
            childNode = nodes[childrenPaths[i]];
            dataModel.children[self.core.getRelid(childNode)] = self.printChildrenRec(childNode, nodes, indent + '  ');
        }
        return dataModel;
    };
    return MiniProject2;
});