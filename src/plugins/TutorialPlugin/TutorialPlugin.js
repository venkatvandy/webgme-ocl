/*globals define*/
/*jshint node:true, browser:true*/

/**
 * Generated by PluginGenerator 1.7.0 from webgme on Sat Oct 15 2016 16:22:56 GMT-0500 (Central Daylight Time).
 * A plugin that inherits from the PluginBase. To see source code documentation about available
 * properties and methods visit %host%/docs/source/PluginBase.html.
 */

define([
    'plugin/PluginConfig',
    'text!./metadata.json',
    'plugin/PluginBase'
], function (
    PluginConfig,
    pluginMetadata,
    PluginBase) {
    'use strict';

    pluginMetadata = JSON.parse(pluginMetadata);

    /**
     * Initializes a new instance of TutorialPlugin.
     * @class
     * @augments {PluginBase}
     * @classdesc This class represents the plugin TutorialPlugin.
     * @constructor
     */
    var TutorialPlugin = function () {
        // Call base class' constructor.
        PluginBase.call(this);
        this.pluginMetadata = pluginMetadata;
    };

    /**
     * Metadata associated with the plugin. Contains id, name, version, description, icon, configStructue etc.
     * This is also available at the instance at this.pluginMetadata.
     * @type {object}
     */
    TutorialPlugin.metadata = pluginMetadata;

    // Prototypical inheritance from PluginBase.
    TutorialPlugin.prototype = Object.create(PluginBase.prototype);
    TutorialPlugin.prototype.constructor = TutorialPlugin;

    /**
     * Main function for the plugin to execute. This will perform the execution.
     * Notes:
     * - Always log with the provided logger.[error,warning,info,debug].
     * - Do NOT put any user interaction logic UI, etc. inside this method.
     * - callback always has to be called even if error happened.
     *
     * @param {function(string, plugin.PluginResult)} callback - the result callback
     */
    TutorialPlugin.prototype.main = function (callback) {
        // Use self to access core, project, result, logger etc from PluginBase.
        // These are all instantiated at this point.
        var self = this,
            nodeObject;


        // Using the logger.
        self.logger.debug('This is a debug message.');
        self.logger.info('This is an info message.');
        self.logger.warn('This is a warning message.');
        self.logger.error('This is an error message.');

        // Using the coreAPI to make changes.

        nodeObject = self.activeNode;

        //self.core.setAttribute(nodeObject, 'name', 'My new obj');
        //self.core.setRegistry(nodeObject, 'position', {x: 70, y: 70});


        // This will save the changes. If you don't want to save;
        // exclude self.save and call callback directly from this scope.
        self.loadNodeMap(self.rootNode)
            .then(function (nodes) {
                self.logger.info(Object.keys(nodes));
                //self.printRandomly(nodes);
                self.printChildrenRec(self.rootNode, nodes);
                self.result.setSuccess(true);
                callback(null, self.result);
            })
            .catch(function (err) {
                // (3)
                self.logger.error(err.stack);
                // Result success is false at invocation.
                callback(err, self.result);
            });

    };

    TutorialPlugin.prototype.loadNodeMap = function (node) {
        var self = this;
        return self.core.loadSubTree(node)
            .then(function (nodeArr) {
                var nodes = {},
                    i;
                for (i = 0; i < nodeArr.length; i += 1) {
                    nodes[self.core.getPath(nodeArr[i])] = nodeArr[i];
                }

                return nodes;
            });
    };

    TutorialPlugin.prototype.printRandomly = function (nodes) {
        var self = this,
            path,
            name,
            attr,
            metaNode,
            node;

        for (path in nodes) {
            node = nodes[path];
            name = self.core.getAttribute(node, 'name');
            if (self.isMetaTypeOf(node, self.META.Transition)) {
                attr = self.core.getAttribute(node, 'guard');
                self.logger.info(name, 'has event', attr);
            } else {
                if(path!=""){
                    metaNode = self.getMetaType(node);
                    self.logger.info(name, 'is of meta-type', self.core.getAttribute(metaNode, 'name'));
                }
            }
        }
    };

    TutorialPlugin.prototype.printChildrenRec = function (root, nodes, indent) {
        var self = this,
            childrenPaths,
            childNode,
            i;

        indent = indent || '';

        childrenPaths = self.core.getChildrenPaths(root);
        self.logger.info(indent, self.core.getAttribute(root, 'name'), 'has', childrenPaths.length, 'children.');

        for (i = 0; i < childrenPaths.length; i += 1) {
            childNode = nodes[childrenPaths[i]];
            self.printChildrenRec(childNode, nodes, indent + '  ');
        }

    };

    return TutorialPlugin;
});
